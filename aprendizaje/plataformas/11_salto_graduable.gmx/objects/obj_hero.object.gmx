<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hero_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Vars
grav = 0.2;
hsp = 0;
hsp_carry = 0; // v de carga de una plataforma
vsp = 0;
//jumpspeed = 7;
movespeed = 3;
latest_image_index = noone;

// number of jumps
jumps = 0;
jumpsmax = 2;

jumpspeed_normal = 5;
jumpspeed_powerup = 8;

jumpspeed = jumpspeed_normal;

// If we saved a spot in current room
if ( global.checkpointR == room)
{
    x = global.checkpointx;
    y = global.checkpointy;
}

key_down = 0; //bajar una plataforma

ladder = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumpspeed = jumpspeed_normal;
sprite_index = spr_hero_walk;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get the players input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);
key_up = keyboard_check(vk_up);
key_down = keyboard_check(vk_down);

// React yo inputs
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;

// If 1 pixel below in an object wall jumps available is jumpsmax
if (place_meeting(x,y+1,obj_wall))
{
    jumps = jumpsmax;
    //if (key_jump) vsp = -jumpspeed; // old jump logic
    
}

if (key_jump) &amp;&amp; (jumps &gt; 0)
{
    jumps -= 1;
    vsp = -jumpspeed;
    //show_message(string(jumps))
}

if(key_jump) &amp;&amp; (place_meeting(x+1,y,obj_wall) || place_meeting(x-1,y,obj_wall))
{
    vsp = -jumpspeed;
}

// Necesitaremos mantener el boton arriba para poder saltar
if (vsp &lt; 0 ) &amp;&amp; (!key_up) vsp = max(vsp, -jumpspeed/4); // vsp, 0 sin suavizado

// Si queremos subir/bajar unas escaleras 
if (key_up || key_down) 
{
    // Si estamos sobre unas escaleras activamos el modo ladder
    if (place_meeting(x,y,obj_ladder)) ladder = true;
}


// Si el modo escaleras está activado
if (ladder)
{   
    // Paramos el movimiento vertical
    vsp = 0;
    // Si estamos apretando la tecla arriba, nos movemos arriba
    if (key_up) vsp = -2;
    // Si estamos apretando la tecla abajo, nos movemos abajo
    if (key_down) vsp = 2;
    // Si dejamos de estar sobre una escalera desactivamos el modo ladder
    if (!place_meeting(x,y,obj_ladder)) ladder = false;
    
} 

// Calcular la velocidad final con carga y reiniciar v carga
// Esta variable nueva solo existe en este step y nos permite evitar
// una aceleracion si sumaramos hsp_carry a hsp directamente
var hsp_final = hsp + hsp_carry;
hsp_carry = 0;

// Y en horizontal collision tendremos en cuenta esta hsp_final
if (place_meeting(x+hsp_final,y,obj_wall))
{
    //Rectificaremos la posición 1 a 1 hasta que estemos justo al lado de la colision
    while(!place_meeting(x+sign(hsp_final),y,obj_wall))
    {
        x += sign(hsp_final);
    }
    
    hsp_final = 0;
    hsp = 0;
}
x += hsp_final;

// Vertical collision
if (place_meeting(x,y+vsp,obj_wall))
{
    //Rectificaremos la posición 1 a 1 hasta que estemos justo al lado de la colision
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

// Animate
// First we flip the sprite arround if is left or right
if (move!=0) image_xscale = move;
if (place_meeting(x,y+1,obj_wall))
{
    if (hsp!=0) sprite_index = spr_hero_walk; else sprite_index = spr_hero_idle;
    //  with move we continue running agains wall
}
else 
{
    // not on the floor
    if (vsp &lt; 0) sprite_index = spr_hero_jump; else sprite_index = spr_hero_fall;
}



/*
// Set sprite direction
if (hsp &gt; 0) image_index = 0;
else if (hsp &lt; 0)image_index = 1;
else {
    image_index = latest_image_index;
} 
latest_image_index = image_index; 
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
