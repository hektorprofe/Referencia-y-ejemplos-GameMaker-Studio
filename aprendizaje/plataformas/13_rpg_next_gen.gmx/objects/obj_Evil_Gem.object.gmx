<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Gem</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>glow = false;
glow_a = 0;
depth = (y * -1) - (obj_Hero.depth * -1);
vision_r = 144;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fire event
glow = false;

/// Attack the hero
show_debug_message("Attacking");
hero_dir = point_direction(x,y,obj_Hero.phy_position_x,obj_Hero.phy_position_y);
hero_dis = point_distance(x,y,obj_Hero.phy_position_x,obj_Hero.phy_position_y);

spawn_x = lengthdir_x(16, hero_dir); // a 24px del centro del heroe
spawn_y = lengthdir_y(16, hero_dir); 

//show_debug_message(string(hero_dis) + " " + string(attack_r));

if (hero_dis &lt;= vision_r &amp;&amp; GameState.switches[? "boss_room_completed"] == false){
    attack = instance_create(x+spawn_x, y+spawn_y, obj_Attack_Laser);

    with (attack){
        force_x = lengthdir_x(force, other.hero_dir);
        force_y = lengthdir_y(force, other.hero_dir);
        phy_rotation = -other.hero_dir;
        physics_apply_impulse(x,y, force_x, force_y);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>glow = true;
alarm[1] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (GameState.switches[? "boss_room_entered"] == true){
    if (alarm[0] &lt;= 0) alarm[0] = 125 + random(30); 
    // a esta alarma le restamos 60*2 y nos queda activa durante 5+random steps
    // la resta debe ser siempre positiva o las alarmas se encontraran
}

if (glow){
    glow_a = lerp(glow_a, 1, 0.1);
} else {
    glow_a = lerp(glow_a, 0, 0.1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (GameState.switches[? "boss_room_completed"] == false){
    draw_self();
    draw_sprite_ext(spr_Gem_Glow,0,x,y,1,1,0,c_white,glow_a);
} else {
    sprite_index = spr_Gem_Win;
    draw_self();
    draw_sprite_ext(spr_Gem_Glow_Win,0,x,y,1,1,0,c_white,glow_a);
}
/*hero_dist = point_distance(x,y,obj_Hero.phy_position_x,obj_Hero.phy_position_y);

if (hero_dist &lt; vision_r){
    draw_circle_color(x,y,vision_r, c_red,c_red,1);
    draw_line_colour(x,y,obj_Hero.phy_position_x,obj_Hero.phy_position_y,c_red,c_red);
} else{
    draw_circle_color(x,y,vision_r, c_green,c_green,1);
}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
