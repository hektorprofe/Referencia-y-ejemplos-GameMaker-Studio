<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Window_Base</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start = false;
alpha = 0;  // La transparencia será el máximo
print_text = ""; // Texto que se va a ir mostrando
time = 0;   // Tiempo en que se irá mostrando el texto
depth = depth - room_height - instance_number(obj_Window_Base); // Profundidad

/// Play first sound while letters appearing
if (audio_is_playing(snd_Talking) == false)
{   
    audio_play_sound(snd_Talking, 10, false);
}
stop_sound = true; 

// Talking box sizes
box_width = 0;
box_height = 0;

// origin object to follow
origin_object = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Calculate new resizes
if (start == true){
    // lerp =&gt; interpolación en %
    // lerp(0,10,0.5) devuelve 5 (el 50% entre 0 y 10)
    // lerp(0,10,2) devuelve 20 (el 200% entre 0 y 10)
    image_yscale = lerp(image_yscale, target_yscale, 0.4);
    progress = image_yscale / target_yscale;
    y = lerp(start_y, target_y, progress);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show letters little by little and manage sound
if (time &lt; text_length)
{   
    time += spd; // Sumamos al tiempo la velocidad que graduamos nosotros
    print_text = string_copy(text,0,time); // E iremos añadiendo poco a poco el texto     
    
    /// Play sound while letters appearing
    if (audio_is_playing(snd_Talking) == false){   
        if (audio_is_playing(snd_Talking2) == false){
            audio_play_sound(snd_Talking2, 10, true);
        }
    }
}
// When texts is completed then
else
{
    // Check if we should stop sound
    if (stop_sound) 
    {
        // Stop it
        audio_stop_sound(snd_Talking2);
        stop_sound = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Relocate the window
x = origin_object.x-box_width/2;
y = origin_object.y-box_height/2 - 60; // negative offset top

    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// User Defined 0
target_y = y; // Guardamos la posición y donde se crea la ventana
start_y = y + sprite_height / 2; // La ventana se empezará a dibujar en el centro vertical
y = start_y; // Damos a y el nuevo valor de inicio

target_yscale = image_yscale; // Guardamos el escalado inicial vertical de la ventana
image_yscale = 0; // Reiniciamos a 0 el escalado vertical
start = true; // Establecemos a true para poder comenzar el proceso de escalado
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Window

// Draw Background
draw_sprite_stretched_ext(spr_Window_Base,0,x+4,y+4,sprite_width - 4, sprite_height - 4,c_white,0.75);

// Draw H V Axis
draw_sprite_stretched(spr_Window_T,0,x+8,y,sprite_width-8,16);
draw_sprite_stretched(spr_Window_B,0,x,y+sprite_height-10,sprite_width,16);

draw_sprite_stretched(spr_Window_ML,0,x,y,16,sprite_height);
draw_sprite_stretched(spr_Window_MR,0,x + sprite_width - 16,y,16,sprite_height);

// Draw Corners
draw_sprite(spr_Window_TL,0,x,y);
draw_sprite(spr_Window_TR,0,x+sprite_width-16,y);
draw_sprite(spr_Window_BL,0,x,y + sprite_height - 10);
draw_sprite(spr_Window_BR,0,x+sprite_width-16,y+sprite_height - 10);

//draw_text(x,y+100,string(x));
//draw_text(x,y+120,string(y));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw text
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text_ext(
    x + padding,               // Dentro del margen interior horizontal
    y + padding,               // Dentro del margen interior vertical
    print_text,                // El texto a escribir
    font_size + (font_size/2), // Distancia en px entre cada línea
    maxlength                  // Ancho máximo en px antes de cada salto de línea
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
