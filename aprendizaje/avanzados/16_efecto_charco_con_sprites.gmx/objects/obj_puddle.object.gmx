<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_puddle</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale=0; // Configuramos la escalabilidad
image_yscale=0;

image_index=floor(random(image_number)); //Escojemos una subimagen del sprite

image_angle=round(random(360)); //Y le damos un ángulo aleatorio

image_speed=0; // paramos la animacion, si la hay

// Establecemos un color de mezcla...
//In a game you can set this to whatever you want...
image_blend= choose(c_red,c_aqua,c_green);

spd=0.01; // Creamos una velocidad a la que se expandirá el sprite

max_s=0.75; //Y un tamaño máximo a expandirse
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if image_xscale&lt;max_s // Comprobamos que no hemos llegado al tamaño máximo
{
image_xscale+=spd; // Escalamos la imagen de menos a mas
image_yscale=image_xscale; // Lo mismo con la y
}

// Cuando alcanzamos el máximo destruimos la instancia
if image_xscale&gt;=max_s instance_destroy(); 



// A continuación dibujamos el charco en la superficie
if surface_exists(global.surf)
{
    surface_set_target(global.surf); //Select surface for drawing...
    
    //Establecemos un modo de mezcla, solo uno de los dos siguientes
    //draw_set_blend_mode_ext(bm_inv_dest_color,bm_normal); 
    draw_set_blend_mode_ext(bm_inv_dest_alpha,bm_inv_src_color);
    
    // Dibujamos el sprite en la superficie
    // Código para calidad normal
    //For normal quality use this code with the normal quality code in the obj_generator... delete if not used...
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,0.5); //Draw sprite to surface...
    
    // O calidad baja
    //draw_sprite_ext(sprite_index,image_index,x/2,y/2,image_xscale/2,image_yscale/2,image_angle,image_blend,1); //Draw sprite to surface...
    
    // Reiniciamos el modo de mezclado a normal
    draw_set_blend_mode(bm_normal);
    
    // Y reiniciamos la superficie
    surface_reset_target();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
