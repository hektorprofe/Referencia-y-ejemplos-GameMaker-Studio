<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Variables globales marcador y número de tiros
global.marcador = 0;
global.tiros = 0;

// Generamos una posición aleatoria para crear la pelota
randomize();
valX = irandom_range(96, 416);
valY = irandom_range(192, 256);

instance_create(valX,valY,obj_Ball);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Destruimos la bola
with(obj_Ball) instance_destroy();

// Generamos una nueva posición aleatoria y creamos una nueva
randomize();
valX = irandom_range(96, 416);
valY = irandom_range(192, 256);

instance_create(valX,valY,obj_Ball);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Cuando la bola cae al suelo, esperamos un poco y la eliminamos
if (obj_Ball.y &gt; room_height - 150)
{
    if (alarm[0] == -1) alarm[0]=45;
}

// Si apretamos el ratón
if mouse_check_button_pressed(mb_left)
{
    // Activamos las físicas de la pelota
    obj_Ball.phy_active = true;
    with (obj_Ball)
    {
        // Incrementamos los tiros
        global.tiros = global.tiros+1;
        
        // Calculamos la dirección inversa del ratón respecto a la pelota
        var dir = point_direction(-mouse_x, -mouse_y, -x, -y);
        // Calculamos el factor de fuerza del impulso, dependiendo de la distancia
        var factor = obj_Ball.distance_factor/19;
        // Y finalmente aplicamos ese impulso en la dirección de la pelota
        physics_apply_impulse(x, y, lengthdir_x(factor, dir), lengthdir_y(factor, dir));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Recuperamos el factor distancia/fuerza del ratón respecto a la pelota
factor=obj_Ball.distance_factor;

// Calculamos el ángulo inverso del ratón respecto a la bola 
angle=point_direction(-mouse_x,-mouse_y,-obj_Ball.x,-obj_Ball.y)

// Guardamos su posición inicial
ax=obj_Ball.x
ay=obj_Ball.y

// Buscamos la distancia de las coordenadas al aplicar el factor distancia/fuerza
movex=lengthdir_x(factor,angle)
movey=lengthdir_y(factor,angle)
 
// Dibujaremos una parábola simulando la coordenada después de aplicar el factor
for(i=0 i&lt;40 i+=1)
{
    // Vamos guardando la posición anterior
    lastx = ax
    lasty = ay
    
    // Incrementamos la posición actual a la generada con el factor
    ax += movex
    ay += movey
    
    // Incrementamos la cantidad de distancia que nos vemos en y 0.5
    movey += 0.51
    
    // Dibujamos las líneas que van formando la parábola
    draw_line(lastx,lasty,ax,ay)
}

// Dibujamos el marcador y debugs
draw_text(45,15,"FACTOR: " +string(obj_Ball.distance_factor));
draw_text(45,45,"SCORE: " +string(global.marcador) + "/" + string(global.tiros));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
