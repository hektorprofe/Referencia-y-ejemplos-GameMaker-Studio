<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>angle = 0;
distance = global.distance;
height = global.height;
spd = global.spd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw over others

var offset_x = room_width/2;
var offset_y = room_height/2;

var x1 = offset_x + cos(degtorad(angle+global.angle)) * distance;
var y1 = offset_y + sin(degtorad(angle+global.angle)) * distance;

var x2 = offset_x + cos(degtorad(angle+global.angle + (360 / 6))) * distance;
var y2 = offset_y + sin(degtorad(angle+global.angle + (360 / 6))) * distance;

var x3 = offset_x + cos(degtorad(angle+global.angle + (360 / 6))) * (distance + height);
var y3 = offset_y + sin(degtorad(angle+global.angle + (360 / 6))) * (distance + height);

var x4 = offset_x + cos(degtorad(angle+global.angle)) * (distance + height);
var y4 = offset_y + sin(degtorad(angle+global.angle)) * (distance + height);

scr_quad(x1, y1, x2, y2, x3, y3, x4, y4, make_color_rgb(219, 3, 17));

// Detectamos colisiones, sólo múltiplos de 60
var p_angle = floor(obj_player.angle / 60) * 60;
var c_angle = floor(angle / 60) * 60;

if (p_angle &lt; 0 ) p_angle = p_angle + 360; // si es negativo

if(distance &lt;= 80 &amp;&amp; distance &gt;= 70) {
    if (c_angle == p_angle) room_restart();
}

//draw_text(50,25,string(c_angle));
//draw_text(50,75,string(p_angle));


// Restamos spd de la distancia
distance -= global.spd;
if (distance &lt; 1) instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
